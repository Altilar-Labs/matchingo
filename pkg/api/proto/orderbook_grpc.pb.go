// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/api/proto/orderbook.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderBookService_CreateOrderBook_FullMethodName   = "/matchingo.api.OrderBookService/CreateOrderBook"
	OrderBookService_GetOrderBook_FullMethodName      = "/matchingo.api.OrderBookService/GetOrderBook"
	OrderBookService_ListOrderBooks_FullMethodName    = "/matchingo.api.OrderBookService/ListOrderBooks"
	OrderBookService_DeleteOrderBook_FullMethodName   = "/matchingo.api.OrderBookService/DeleteOrderBook"
	OrderBookService_CreateOrder_FullMethodName       = "/matchingo.api.OrderBookService/CreateOrder"
	OrderBookService_GetOrder_FullMethodName          = "/matchingo.api.OrderBookService/GetOrder"
	OrderBookService_CancelOrder_FullMethodName       = "/matchingo.api.OrderBookService/CancelOrder"
	OrderBookService_GetOrderBookState_FullMethodName = "/matchingo.api.OrderBookService/GetOrderBookState"
)

// OrderBookServiceClient is the client API for OrderBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrderBookService provides all operations for managing multiple order books
type OrderBookServiceClient interface {
	// CreateOrderBook creates a new order book with the given name
	CreateOrderBook(ctx context.Context, in *CreateOrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	// GetOrderBook retrieves information about an order book
	GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	// ListOrderBooks lists all available order books
	ListOrderBooks(ctx context.Context, in *ListOrderBooksRequest, opts ...grpc.CallOption) (*ListOrderBooksResponse, error)
	// DeleteOrderBook deletes an order book
	DeleteOrderBook(ctx context.Context, in *DeleteOrderBookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateOrder submits a new order to the specified order book
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// GetOrder retrieves an order by ID
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// CancelOrder cancels an existing order
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetOrderBookState retrieves the current state of an order book
	GetOrderBookState(ctx context.Context, in *GetOrderBookStateRequest, opts ...grpc.CallOption) (*OrderBookStateResponse, error)
}

type orderBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderBookServiceClient(cc grpc.ClientConnInterface) OrderBookServiceClient {
	return &orderBookServiceClient{cc}
}

func (c *orderBookServiceClient) CreateOrderBook(ctx context.Context, in *CreateOrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, OrderBookService_CreateOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) ListOrderBooks(ctx context.Context, in *ListOrderBooksRequest, opts ...grpc.CallOption) (*ListOrderBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrderBooksResponse)
	err := c.cc.Invoke(ctx, OrderBookService_ListOrderBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) DeleteOrderBook(ctx context.Context, in *DeleteOrderBookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OrderBookService_DeleteOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderBookService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OrderBookService_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrderBookState(ctx context.Context, in *GetOrderBookStateRequest, opts ...grpc.CallOption) (*OrderBookStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBookStateResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetOrderBookState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderBookServiceServer is the server API for OrderBookService service.
// All implementations must embed UnimplementedOrderBookServiceServer
// for forward compatibility.
//
// OrderBookService provides all operations for managing multiple order books
type OrderBookServiceServer interface {
	// CreateOrderBook creates a new order book with the given name
	CreateOrderBook(context.Context, *CreateOrderBookRequest) (*OrderBookResponse, error)
	// GetOrderBook retrieves information about an order book
	GetOrderBook(context.Context, *GetOrderBookRequest) (*OrderBookResponse, error)
	// ListOrderBooks lists all available order books
	ListOrderBooks(context.Context, *ListOrderBooksRequest) (*ListOrderBooksResponse, error)
	// DeleteOrderBook deletes an order book
	DeleteOrderBook(context.Context, *DeleteOrderBookRequest) (*empty.Empty, error)
	// CreateOrder submits a new order to the specified order book
	CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error)
	// GetOrder retrieves an order by ID
	GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error)
	// CancelOrder cancels an existing order
	CancelOrder(context.Context, *CancelOrderRequest) (*empty.Empty, error)
	// GetOrderBookState retrieves the current state of an order book
	GetOrderBookState(context.Context, *GetOrderBookStateRequest) (*OrderBookStateResponse, error)
	mustEmbedUnimplementedOrderBookServiceServer()
}

// UnimplementedOrderBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderBookServiceServer struct{}

func (UnimplementedOrderBookServiceServer) CreateOrderBook(context.Context, *CreateOrderBookRequest) (*OrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderBook not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrderBook(context.Context, *GetOrderBookRequest) (*OrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedOrderBookServiceServer) ListOrderBooks(context.Context, *ListOrderBooksRequest) (*ListOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderBooks not implemented")
}
func (UnimplementedOrderBookServiceServer) DeleteOrderBook(context.Context, *DeleteOrderBookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderBook not implemented")
}
func (UnimplementedOrderBookServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrderBookState(context.Context, *GetOrderBookStateRequest) (*OrderBookStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBookState not implemented")
}
func (UnimplementedOrderBookServiceServer) mustEmbedUnimplementedOrderBookServiceServer() {}
func (UnimplementedOrderBookServiceServer) testEmbeddedByValue()                          {}

// UnsafeOrderBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderBookServiceServer will
// result in compilation errors.
type UnsafeOrderBookServiceServer interface {
	mustEmbedUnimplementedOrderBookServiceServer()
}

func RegisterOrderBookServiceServer(s grpc.ServiceRegistrar, srv OrderBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderBookService_ServiceDesc, srv)
}

func _OrderBookService_CreateOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).CreateOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_CreateOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).CreateOrderBook(ctx, req.(*CreateOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetOrderBook(ctx, req.(*GetOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_ListOrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).ListOrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_ListOrderBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).ListOrderBooks(ctx, req.(*ListOrderBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_DeleteOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).DeleteOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_DeleteOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).DeleteOrderBook(ctx, req.(*DeleteOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrderBookState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBookStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetOrderBookState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetOrderBookState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetOrderBookState(ctx, req.(*GetOrderBookStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderBookService_ServiceDesc is the grpc.ServiceDesc for OrderBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchingo.api.OrderBookService",
	HandlerType: (*OrderBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderBook",
			Handler:    _OrderBookService_CreateOrderBook_Handler,
		},
		{
			MethodName: "GetOrderBook",
			Handler:    _OrderBookService_GetOrderBook_Handler,
		},
		{
			MethodName: "ListOrderBooks",
			Handler:    _OrderBookService_ListOrderBooks_Handler,
		},
		{
			MethodName: "DeleteOrderBook",
			Handler:    _OrderBookService_DeleteOrderBook_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderBookService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderBookService_GetOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderBookService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderBookState",
			Handler:    _OrderBookService_GetOrderBookState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/orderbook.proto",
}
